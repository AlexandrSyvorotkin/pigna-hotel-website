const ResponsiveContentContainer = ({children}: {children: React.ReactNode}) => {
  return (
    <div className="w-full flex justify-center">
      <div className="
        sm:px-[18px]
        md:px-[0px]
        md:max-w-[720px]
        lg:max-w-[1160px]
        xl:max-w-[1750px]"
      >
        {children}
      </div>
    </div>
  )
}

export { ResponsiveContentContainer };

// Я помогу вам рассчитать пропорциональные отступы для промежуточных разрешений. 
// Для плавного перехода от мобильной (360px) к десктопной (1920px) версии, можно использовать следующую логику:
// 360px -> контент 324px (паддинги 18px)
// 800px -> контент ~720px (паддинги ~40px)
// 1280px -> контент ~1160px (паддинги ~60px)
// 1920px -> контент 1750px (паддинги 85px)
// Вот необходимые изменения в коде:


// Основные изменения:
// Добавлены адаптивные паддинги через Tailwind классы
// Внутренний контейнер теперь использует w-full max-w-[1750px] вместо фиксированной ширины
// Это обеспечит:
// На мобильных устройствах (sm): 18px паддинги
// На планшетах (md): 40px паддинги
// На небольших десктопах (lg): 60px паддинги
// На больших экранах (xl): 85px паддинги
// Контент будет автоматически подстраиваться под доступное пространство, но не превысит 1750px на больших экранах.
// Для справки, брейкпоинты Tailwind по умолчанию:
// sm: 640px
// md: 768px
// lg: 1024px
// xl: 1280px
// 2xl: 1536px

// На мой взгляд, надо сделать варианты верстки под 4 размера экрана: мобильный, 800*600, 1280*720 и 1920х1080 на основе макета, сохраняя пропорции макета на этих трех размерах экрана. 
//В промежуточных ширинах экрана верстка остается фиксированной, увеличиваются только отступы (пространство слева и справа). 
//В данных 4 размерах экрана нужно проверить размер шрифтов, отступов, пропорции и размер картинок. 
//Все это делается на основе макета, сохраняя пропорции макета на этих трех размерах экрана.